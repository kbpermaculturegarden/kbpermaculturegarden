[{"name":"app.R","content":"#Here we use a shinylive app to host on github.io\r\n\r\n#install.packages(c(\"shinylive\", \"httpuv\"))\r\n\r\n# to build shinylive, run:\r\n#shinylive::export(appdir = \"permaculture_shiny\", destdir = \"docs\")\r\n\r\n# to test run, run:-\r\n#httpuv::runStaticServer(\"docs\")\r\n\r\n#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    https://shiny.posit.co/\r\n#\r\n\r\nlibrary(shiny)\r\n\r\nlibrary(tidyverse)\r\nlibrary(igraph)\r\nlibrary(glue)\r\nlibrary(htmltools)\r\nlibrary(networkD3)\r\n\r\nlibrary(rjson)\r\nlibrary(jsonlite)\r\n\r\n\r\nlibrary(ggpubr)\r\n\r\nlibrary(ggplot2)\r\nlibrary(ggrepel)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n\r\n    # Application title\r\n    titlePanel(\"Old Faithful Geyser Data\"),\r\n\r\n    # Sidebar with a slider input for number of bins \r\n    sidebarLayout(\r\n        sidebarPanel(\r\n            sliderInput(\"bins\",\r\n                        \"Number of bins:\",\r\n                        min = 1,\r\n                        max = 50,\r\n                        value = 30)\r\n        ),\r\n\r\n        # Show a plot of the generated distribution\r\n        mainPanel(\r\n           plotOutput(\"distPlot\"),\r\n           htmlOutput('networkPlot')\r\n        )\r\n    )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n\r\n    output$distPlot <- renderPlot({\r\n        # generate bins based on input$bins from ui.R\r\n        x    <- faithful[, 2]\r\n        bins <- seq(min(x), max(x), length.out = input$bins + 1)\r\n\r\n        # draw the histogram with the specified number of bins\r\n        hist(x, breaks = bins, col = 'darkgray', border = 'white',\r\n             xlab = 'Waiting time to next eruption (in mins)',\r\n             main = 'Histogram of waiting times')\r\n    })\r\n    \r\n    output$networkPlot <- renderPrint({\r\n      d3ForceNetwork(Nodes = MisNodes,\r\n                     Links = MisLinks,\r\n                     Source = \"source\", Target = \"target\",\r\n                     Value = \"value\", NodeID = \"name\",\r\n                     Group = \"group\", width = 400, height = 500,\r\n                     opacity = input$slider, standAlone = FALSE,\r\n                     parentElement = '#networkPlot')\r\n    })\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
